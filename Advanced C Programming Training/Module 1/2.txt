#include <stdio.h>
#include <string.h>
#include <signal.h>
#include <time.h>
#include <stdlib.h>

#define MAX_TASKS 3
#define MAX_TASK_LENGTH 100
#define DAYS_IN_WEEK 7

typedef struct {
    char dayName[10];
    char tasks[MAX_TASKS][MAX_TASK_LENGTH];
    int taskCount;
} Day;

void handle_sigint(int sig) {
    printf("\nSignal %d received (e.g., Ctrl+C). Termination blocked. Use the menu to exit safely.\n", sig);
}

void initializeWeek(Day week[]) {
    char *names[DAYS_IN_WEEK] = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
    for (int i = 0; i < DAYS_IN_WEEK; i++) {
        strcpy(week[i].dayName, names[i]);
        week[i].taskCount = 0;
    }
}

int getDayIndex(char *dayName, Day week[]) {
    for (int i = 0; i < DAYS_IN_WEEK; i++) {
        if (strcasecmp(week[i].dayName, dayName) == 0)
            return i;
    }
    return -1;
}

void inputTasks(Day week[]) {
    char dayName[10];
    printf("Enter the day name to add tasks (e.g., Monday): ");
    scanf("%s", dayName);

    int index = getDayIndex(dayName, week);
    if (index == -1) {
        printf("Invalid day name!\n");
        return;
    }

    if (week[index].taskCount >= MAX_TASKS) {
        printf("Maximum tasks already added for %s.\n", week[index].dayName);
        return;
    }

    int remaining = MAX_TASKS - week[index].taskCount;
    printf("You can add up to %d tasks.\n", remaining);
    getchar();

    for (int i = 0; i < remaining; i++) {
        char temp[MAX_TASK_LENGTH];
        printf("Enter task %d (or type 'done' to stop): ", i + 1);
        fgets(temp, MAX_TASK_LENGTH, stdin);
        temp[strcspn(temp, "\n")] = '\0';
        if (strcasecmp(temp, "done") == 0)
            break;
        strcpy(week[index].tasks[week[index].taskCount], temp);
        week[index].taskCount++;
    }
}

void displayTasks(Day week[]) {
    printf("\nWeekly Task List:\n");
    for (int i = 0; i < DAYS_IN_WEEK; i++) {
        printf("%s:\n", week[i].dayName);
        if (week[i].taskCount == 0) {
            printf("  No tasks.\n");
        } else {
            for (int j = 0; j < week[i].taskCount; j++) {
                printf("  - %s\n", week[i].tasks[j]);
            }
        }
    }
}

int main() {
    signal(SIGINT, handle_sigint);

    Day week[DAYS_IN_WEEK];

    clock_t start_init = clock();
    initializeWeek(week);
    clock_t end_init = clock();
    printf("Initialization took %.5f seconds.\n", (double)(end_init - start_init) / CLOCKS_PER_SEC);

    int choice;
    do {
        printf("\nMenu:\n1. Add Tasks\n2. View Tasks\n3. Exit\nChoose an option: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: {
                clock_t start = clock();
                inputTasks(week);
                clock_t end = clock();
                printf("Task input took %.5f seconds.\n", (double)(end - start) / CLOCKS_PER_SEC);
                break;
            }
            case 2: {
                clock_t start = clock();
                displayTasks(week);
                clock_t end = clock();
                printf("Displaying tasks took %.5f seconds.\n", (double)(end - start) / CLOCKS_PER_SEC);
                break;
            }
            case 3:
                printf("Exiting program.\n");
                break;
            default:
                printf("Invalid choice. Please enter 1, 2, or 3.\n");
        }
    } while (choice != 3);

    return 0;
}
